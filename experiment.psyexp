<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2023.2.2">
  <Settings>
    <Param val="3" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="ptb" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="" valType="str" updates="None" name="End Message"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1440, 900]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="none" valType="str" updates="None" name="backgroundFit"/>
    <Param val="" valType="str" updates="None" name="backgroundImg"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="{'thisRow.t': 'priority.CRITICAL', 'expName': 'priority.LOW'}" valType="dict" updates="None" name="colPriority"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="experiment" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="neon.local" valType="str" updates="None" name="plCompanionAddress"/>
    <Param val="scene_camera.json" valType="file" updates="None" name="plCompanionCameraCalibration"/>
    <Param val="8080" valType="num" updates="None" name="plCompanionPort"/>
    <Param val="True" valType="bool" updates="None" name="plCompanionRecordingEnabled"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="time" valType="str" updates="None" name="sortColumns"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
    <Param val="pyglet" valType="str" updates="None" name="winBackend"/>
  </Settings>
  <Routines>
    <Routine name="baseline">
      <RoutineSettingsComponent name="baseline" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="baseline" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="baseline_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="Math.random.shuffle(possible_positions);&amp;#10;[pos_baseline_circle1, pos_baseline_circle2, pos_baseline_circle3, pos_baseline_target] = possible_positions;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="random.shuffle(possible_positions)&amp;#10;pos_baseline_circle1, pos_baseline_circle2, pos_baseline_circle3, pos_baseline_target = possible_positions&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="baseline_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="fixation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="fixation_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="baseline_circle1" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="baseline_circle1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="pos_baseline_circle1" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="circle_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="8.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="baseline_circle2" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$color" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$color" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="baseline_circle2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="pos_baseline_circle2" valType="list" updates="set every repeat" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="circle_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="8.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="baseline_circle3" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="baseline_circle3" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="pos_baseline_circle3" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="circle" valType="str" updates="None" name="shape"/>
        <Param val="circle_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="8.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="baseline_target" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="baseline_target" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="pos_baseline_target" valType="list" updates="set every repeat" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="None" name="shape"/>
        <Param val="rectangle_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="8.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <MouseComponent name="baseline_response" plugin="None">
        <Param val="baseline_target" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="baseline_response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="2.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="8.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="load_variables">
      <RoutineSettingsComponent name="load_variables" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="load_variables" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="code" plugin="None">
        <Param val="# variables that are constant for the experiment&amp;#10;import random&amp;#10;from numpy.random import choice&amp;#10;import pandas as pd&amp;#10;&amp;#10;distractors = pd.read_csv('distractors.csv')&amp;#10;images = distractors['image']&amp;#10;fixation_size = (15, 15)&amp;#10;circle_size = (70,70)&amp;#10;rectangle_size = (70,70)&amp;#10;color = &quot;green&quot;&amp;#10;colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]&amp;#10;image_size = (200, 200)&amp;#10;possible_positions = [(0,250), (0,-250), (250, 0), (-250, 0)]&amp;#10;conditions = ['present_emotional', 'present_neutral', 'absent_emotional', 'absent_neutral']&amp;#10;weights = [1, 1, 1, 1]&amp;#10;" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="import * as random from 'random';&amp;#10;import {choice} from 'numpy/random';&amp;#10;import * as pd from 'pandas';&amp;#10;distractors = pd.read_csv(&quot;distractors.csv&quot;);&amp;#10;images = distractors[&quot;image&quot;];&amp;#10;fixation_size = [15, 15];&amp;#10;circle_size = [70, 70];&amp;#10;rectangle_size = [70, 70];&amp;#10;color = &quot;green&quot;;&amp;#10;colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;];&amp;#10;image_size = [200, 200];&amp;#10;possible_positions = [[0, 250], [0, (- 250)], [250, 0], [(- 250), 0]];&amp;#10;conditions = [&quot;present_emotional&quot;, &quot;present_neutral&quot;, &quot;absent_emotional&quot;, &quot;absent_neutral&quot;];&amp;#10;weights = [1, 1, 1, 1];&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="distractor_color = &quot;&quot;&amp;#10;target_color = &quot;&quot;&amp;#10;correct_response = &quot;&quot;&amp;#10;current_condition = &quot;&quot;&amp;#10;screen_components = []&amp;#10;circle = &quot;&quot;&amp;#10;target = &quot;&quot;&amp;#10;distractor = &quot;&quot;&amp;#10;neutral_red_square = &quot;&quot;&amp;#10;perception_text = &quot;In this task, you have to press the right arrow key if the white square is present and the left arrow key of the white square is absent as fast as possible.&quot;&amp;#10;action_text = &quot;You will be shown some circles and one white square surrounding an emotional picture. The white square is your target.  Your task is to click on the white square while ignoring the emotional picture. If the white square is not there on the screen then click on the centre of the screen.&quot;&amp;#10;target_present = False&amp;#10;image = &quot;&quot;&amp;#10;code = &quot;&quot;" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="distractor_color = &quot;&quot;;&amp;#10;target_color = &quot;&quot;;&amp;#10;correct_response = &quot;&quot;;&amp;#10;current_condition = &quot;&quot;;&amp;#10;screen_components = [];&amp;#10;circle = &quot;&quot;;&amp;#10;target = &quot;&quot;;&amp;#10;distractor = &quot;&quot;;&amp;#10;neutral_red_square = &quot;&quot;;&amp;#10;perception_text = &quot;In this task, you have to press the right arrow key if the white square is present and the left arrow key of the white square is absent as fast as possible.&quot;;&amp;#10;action_text = &quot;You will be shown some circles and one white square surrounding an emotional picture. The white square is your target.  Your task is to click on the white square while ignoring the emotional picture. If the white square is not there on the screen then click on the centre of the screen.&quot;;&amp;#10;target_present = false;&amp;#10;image = &quot;&quot;;&amp;#10;code = &quot;&quot;;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="action">
      <RoutineSettingsComponent name="action" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="action" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="action_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="Math.random.shuffle(possible_positions);&amp;#10;[pos_action_circle1, pos_action_circle2, pos_action_circle3, pos_action_target] = possible_positions;&amp;#10;image = choice(images);&amp;#10;code = image.split(&quot;/&quot;)[0];&amp;#10;Math.random.shuffle(conditions);&amp;#10;current_condition = Math.random.choices(conditions, {&quot;weights&quot;: weights})[0];&amp;#10;if ((current_condition === &quot;present_emotional&quot;)) {&amp;#10;    psychoJS.experiment.addData(&quot;Target&quot;, &quot;present&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Phase&quot;, &quot;action&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Valence&quot;, code);&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(3), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;        screen_components.push(circle);&amp;#10;    }&amp;#10;    distractor = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;distractor&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;image&quot;: image, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;size&quot;: image_size, &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: true, &quot;depth&quot;: (- 6.0)});&amp;#10;    screen_components.push(distractor);&amp;#10;    target = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: rectangle_size[0], &quot;height&quot;: rectangle_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[3], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 4.0), &quot;interpolate&quot;: true});&amp;#10;    screen_components.push(target);&amp;#10;} else {&amp;#10;    if ((current_condition === &quot;present_neutral&quot;)) {&amp;#10;        psychoJS.experiment.addData(&quot;Target&quot;, &quot;present&quot;);&amp;#10;        psychoJS.experiment.addData(&quot;Phase&quot;, &quot;action&quot;);&amp;#10;        psychoJS.experiment.addData(&quot;Valence&quot;, &quot;neutral&quot;);&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(3), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;            screen_components.push(circle);&amp;#10;        }&amp;#10;        target = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: rectangle_size[0], &quot;height&quot;: rectangle_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[3], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 4.0), &quot;interpolate&quot;: true});&amp;#10;        screen_components.push(target);&amp;#10;        neutral_red_square = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;red_square&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: image_size[0], &quot;height&quot;: image_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;red&quot;, &quot;fillColor&quot;: &quot;red&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 8.0), &quot;interpolate&quot;: true});&amp;#10;        screen_components.push(neutral_red_square);&amp;#10;    } else {&amp;#10;        if ((current_condition === &quot;absent_emotional&quot;)) {&amp;#10;            psychoJS.experiment.addData(&quot;Target&quot;, &quot;Absent&quot;);&amp;#10;            psychoJS.experiment.addData(&quot;Phase&quot;, &quot;action&quot;);&amp;#10;            psychoJS.experiment.addData(&quot;Valence&quot;, code);&amp;#10;            for (var i, _pj_c = 0, _pj_a = util.range(4), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                i = _pj_a[_pj_c];&amp;#10;                circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;                screen_components.push(circle);&amp;#10;            }&amp;#10;            target = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;image&quot;: image, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;size&quot;: image_size, &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: true, &quot;depth&quot;: (- 6.0)});&amp;#10;            screen_components.push(target);&amp;#10;        } else {&amp;#10;            if ((current_condition === &quot;absent_neutral&quot;)) {&amp;#10;                psychoJS.experiment.addData(&quot;Target&quot;, &quot;absent&quot;);&amp;#10;                psychoJS.experiment.addData(&quot;Phase&quot;, &quot;action&quot;);&amp;#10;                psychoJS.experiment.addData(&quot;Valence&quot;, &quot;neutral&quot;);&amp;#10;                for (var i, _pj_c = 0, _pj_a = util.range(4), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    i = _pj_a[_pj_c];&amp;#10;                    circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;                    screen_components.push(circle);&amp;#10;                }&amp;#10;                target = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: image_size[0], &quot;height&quot;: image_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;red&quot;, &quot;fillColor&quot;: &quot;red&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 8.0), &quot;interpolate&quot;: true});&amp;#10;                screen_components.push(target);&amp;#10;            } else {&amp;#10;                console.log(&quot;something went wrong, option is not available&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;for (var component, _pj_c = 0, _pj_a = screen_components, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    component = _pj_a[_pj_c];&amp;#10;    component.setAutoDraw(true);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="random.shuffle(possible_positions)&amp;#10;pos_action_circle1, pos_action_circle2, pos_action_circle3, pos_action_target = possible_positions&amp;#10;&amp;#10;image = choice(images)&amp;#10;code = image.split(&quot;/&quot;)[0]&amp;#10;&amp;#10;random.shuffle(conditions)&amp;#10;current_condition = random.choices(conditions, weights=weights)[0]&amp;#10;&amp;#10;# componenets that make the&amp;#10;if current_condition == &quot;present_emotional&quot;:&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;present&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;action&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, code)&amp;#10;    for i in range(3):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    distractor = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name='distractor', units='pix', &amp;#10;        image=image, mask=None, anchor='center',&amp;#10;        ori=0.0, pos=(0, 0), size=image_size,&amp;#10;        color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;        flipHoriz=False, flipVert=False,&amp;#10;        texRes=128.0, interpolate=True, depth=-6.0)&amp;#10;    screen_components.append(distractor)&amp;#10;    target = visual.Rect(&amp;#10;        win=win, name='target',units='pix', &amp;#10;        width=rectangle_size[0], height=rectangle_size[1],&amp;#10;        ori=0.0, pos=possible_positions[3], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-4.0, interpolate=True)&amp;#10;    screen_components.append(target)   &amp;#10;elif current_condition == &quot;present_neutral&quot;:&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;present&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;action&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, &quot;neutral&quot;)&amp;#10;    for i in range(3):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    target = visual.Rect(&amp;#10;        win=win, name='target',units='pix', &amp;#10;        width=rectangle_size[0], height=rectangle_size[1],&amp;#10;        ori=0.0, pos=possible_positions[3], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-4.0, interpolate=True)&amp;#10;    screen_components.append(target)&amp;#10;    neutral_red_square = visual.Rect(&amp;#10;        win=win, name='red_square', units='pix',&amp;#10;        width=image_size[0], height=image_size[1],&amp;#10;        ori=0.0, pos=(0, 0), anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='red', fillColor='red',&amp;#10;        opacity=None, depth=-8.0, interpolate=True)&amp;#10;    screen_components.append(neutral_red_square)&amp;#10;elif current_condition == &quot;absent_emotional&quot;:&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;Absent&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;action&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, code)&amp;#10;    for i in range(4):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    target = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name='target', units='pix', &amp;#10;        image=image, mask=None, anchor='center',&amp;#10;        ori=0.0, pos=(0, 0), size=image_size,&amp;#10;        color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;        flipHoriz=False, flipVert=False,&amp;#10;        texRes=128.0, interpolate=True, depth=-6.0)&amp;#10;    screen_components.append(target)&amp;#10;elif current_condition == 'absent_neutral':&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;absent&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;action&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, &quot;neutral&quot;)&amp;#10;    for i in range(4):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    target = visual.Rect(&amp;#10;        win=win, name='target', units='pix',&amp;#10;        width=image_size[0], height=image_size[1],&amp;#10;        ori=0.0, pos=(0, 0), anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='red', fillColor='red',&amp;#10;        opacity=None, depth=-8.0, interpolate=True)&amp;#10;    screen_components.append(target)&amp;#10;else:&amp;#10;    print(&quot;something went wrong, option is not available&quot;)&amp;#10;    &amp;#10;for component in screen_components:&amp;#10;    component.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var component, _pj_c = 0, _pj_a = screen_components, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    component = _pj_a[_pj_c];&amp;#10;    component.setAutoDraw(false);&amp;#10;}&amp;#10;screen_components = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="for component in screen_components:&amp;#10;    component.setAutoDraw(False)&amp;#10;&amp;#10;screen_components = []" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="action_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <MouseComponent name="action_response" plugin="None">
        <Param val="target" valType="list" updates="constant" name="clickable"/>
        <Param val="" valType="list" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="valid click" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="action_response" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="8.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
    </Routine>
    <Routine name="perception">
      <RoutineSettingsComponent name="perception" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="perception" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <CodeComponent name="perception_code" plugin="None">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="Math.random.shuffle(possible_positions);&amp;#10;[pos_action_circle1, pos_action_circle2, pos_action_circle3, pos_action_target] = possible_positions;&amp;#10;Math.random.shuffle(conditions);&amp;#10;current_condition = Math.random.choices(conditions, {&quot;weights&quot;: weights})[0];&amp;#10;image = choice(images);&amp;#10;code = image.split(&quot;/&quot;)[0];&amp;#10;if ((current_condition === &quot;present_emotional&quot;)) {&amp;#10;    target_present = true;&amp;#10;    psychoJS.experiment.addData(&quot;Target&quot;, &quot;present&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Phase&quot;, &quot;perception&quot;);&amp;#10;    psychoJS.experiment.addData(&quot;Valence&quot;, code);&amp;#10;    for (var i, _pj_c = 0, _pj_a = util.range(3), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;        i = _pj_a[_pj_c];&amp;#10;        circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;        screen_components.push(circle);&amp;#10;    }&amp;#10;    distractor = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;distractor&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;image&quot;: image, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;size&quot;: image_size, &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: true, &quot;depth&quot;: (- 6.0)});&amp;#10;    screen_components.push(distractor);&amp;#10;    target = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: rectangle_size[0], &quot;height&quot;: rectangle_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[3], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 4.0), &quot;interpolate&quot;: true});&amp;#10;    screen_components.push(target);&amp;#10;} else {&amp;#10;    if ((current_condition === &quot;present_neutral&quot;)) {&amp;#10;        target_present = true;&amp;#10;        psychoJS.experiment.addData(&quot;Target&quot;, &quot;present&quot;);&amp;#10;        psychoJS.experiment.addData(&quot;Phase&quot;, &quot;perception&quot;);&amp;#10;        psychoJS.experiment.addData(&quot;Valence&quot;, &quot;neutral&quot;);&amp;#10;        for (var i, _pj_c = 0, _pj_a = util.range(3), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;            i = _pj_a[_pj_c];&amp;#10;            circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;            screen_components.push(circle);&amp;#10;        }&amp;#10;        target = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: rectangle_size[0], &quot;height&quot;: rectangle_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[3], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 4.0), &quot;interpolate&quot;: true});&amp;#10;        screen_components.push(target);&amp;#10;        neutral_red_square = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;red_square&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: image_size[0], &quot;height&quot;: image_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;red&quot;, &quot;fillColor&quot;: &quot;red&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 8.0), &quot;interpolate&quot;: true});&amp;#10;        screen_components.push(neutral_red_square);&amp;#10;    } else {&amp;#10;        if ((current_condition === &quot;absent_emotional&quot;)) {&amp;#10;            target_present = false;&amp;#10;            psychoJS.experiment.addData(&quot;Target&quot;, &quot;Absent&quot;);&amp;#10;            psychoJS.experiment.addData(&quot;Phase&quot;, &quot;perception&quot;);&amp;#10;            psychoJS.experiment.addData(&quot;Valence&quot;, code);&amp;#10;            for (var i, _pj_c = 0, _pj_a = util.range(4), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                i = _pj_a[_pj_c];&amp;#10;                circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;                screen_components.push(circle);&amp;#10;            }&amp;#10;            target = new visual.ImageStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;image&quot;: image, &quot;mask&quot;: null, &quot;anchor&quot;: &quot;center&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;size&quot;: image_size, &quot;color&quot;: [1, 1, 1], &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;opacity&quot;: null, &quot;flipHoriz&quot;: false, &quot;flipVert&quot;: false, &quot;texRes&quot;: 128.0, &quot;interpolate&quot;: true, &quot;depth&quot;: (- 6.0)});&amp;#10;            screen_components.push(target);&amp;#10;        } else {&amp;#10;            if ((current_condition === &quot;absent_neutral&quot;)) {&amp;#10;                target_present = false;&amp;#10;                psychoJS.experiment.addData(&quot;Target&quot;, &quot;absent&quot;);&amp;#10;                psychoJS.experiment.addData(&quot;Phase&quot;, &quot;perception&quot;);&amp;#10;                psychoJS.experiment.addData(&quot;Valence&quot;, &quot;neutral&quot;);&amp;#10;                for (var i, _pj_c = 0, _pj_a = util.range(4), _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;                    i = _pj_a[_pj_c];&amp;#10;                    circle = new visual.ShapeStim({&quot;win&quot;: psychoJS.window, &quot;name&quot;: `circle_${i}`, &quot;units&quot;: &quot;pix&quot;, &quot;size&quot;: circle_size, &quot;vertices&quot;: &quot;circle&quot;, &quot;ori&quot;: 0.0, &quot;pos&quot;: possible_positions[i], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;white&quot;, &quot;fillColor&quot;: &quot;white&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 3.0), &quot;interpolate&quot;: true});&amp;#10;                    screen_components.push(circle);&amp;#10;                }&amp;#10;                target = new visual.Rect({&quot;win&quot;: psychoJS.window, &quot;name&quot;: &quot;target&quot;, &quot;units&quot;: &quot;pix&quot;, &quot;width&quot;: image_size[0], &quot;height&quot;: image_size[1], &quot;ori&quot;: 0.0, &quot;pos&quot;: [0, 0], &quot;anchor&quot;: &quot;center&quot;, &quot;lineWidth&quot;: 1.0, &quot;colorSpace&quot;: &quot;rgb&quot;, &quot;lineColor&quot;: &quot;red&quot;, &quot;fillColor&quot;: &quot;red&quot;, &quot;opacity&quot;: null, &quot;depth&quot;: (- 8.0), &quot;interpolate&quot;: true});&amp;#10;                screen_components.push(target);&amp;#10;            } else {&amp;#10;                console.log(&quot;something went wrong, option is not available&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;for (var component, _pj_c = 0, _pj_a = screen_components, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    component = _pj_a[_pj_c];&amp;#10;    component.setAutoDraw(true);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="random.shuffle(possible_positions)&amp;#10;pos_action_circle1, pos_action_circle2, pos_action_circle3, pos_action_target = possible_positions&amp;#10;&amp;#10;random.shuffle(conditions)&amp;#10;current_condition = random.choices(conditions, weights=weights)[0]&amp;#10;&amp;#10;image = choice(images)&amp;#10;code = image.split(&quot;/&quot;)[0]&amp;#10;&amp;#10;# componenets that make the&amp;#10;if current_condition == &quot;present_emotional&quot;:&amp;#10;    target_present = True&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;present&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;perception&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, code)&amp;#10;    for i in range(3):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    distractor = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name='distractor', units='pix', &amp;#10;        image=image, mask=None, anchor='center',&amp;#10;        ori=0.0, pos=(0, 0), size=image_size,&amp;#10;        color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;        flipHoriz=False, flipVert=False,&amp;#10;        texRes=128.0, interpolate=True, depth=-6.0)&amp;#10;    screen_components.append(distractor)&amp;#10;    target = visual.Rect(&amp;#10;        win=win, name='target',units='pix', &amp;#10;        width=rectangle_size[0], height=rectangle_size[1],&amp;#10;        ori=0.0, pos=possible_positions[3], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-4.0, interpolate=True)&amp;#10;    screen_components.append(target)   &amp;#10;elif current_condition == &quot;present_neutral&quot;:&amp;#10;    target_present = True&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;present&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;perception&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, &quot;neutral&quot;)&amp;#10;    for i in range(3):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    target = visual.Rect(&amp;#10;        win=win, name='target',units='pix', &amp;#10;        width=rectangle_size[0], height=rectangle_size[1],&amp;#10;        ori=0.0, pos=possible_positions[3], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-4.0, interpolate=True)&amp;#10;    screen_components.append(target)&amp;#10;    neutral_red_square = visual.Rect(&amp;#10;        win=win, name='red_square', units='pix',&amp;#10;        width=image_size[0], height=image_size[1],&amp;#10;        ori=0.0, pos=(0, 0), anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='red', fillColor='red',&amp;#10;        opacity=None, depth=-8.0, interpolate=True)&amp;#10;    screen_components.append(neutral_red_square)&amp;#10;elif current_condition == &quot;absent_emotional&quot;:&amp;#10;    target_present = False&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;Absent&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;perception&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, code)&amp;#10;    for i in range(4):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    target = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name='target', units='pix', &amp;#10;        image=image, mask=None, anchor='center',&amp;#10;        ori=0.0, pos=(0, 0), size=image_size,&amp;#10;        color=[1,1,1], colorSpace='rgb', opacity=None,&amp;#10;        flipHoriz=False, flipVert=False,&amp;#10;        texRes=128.0, interpolate=True, depth=-6.0)&amp;#10;    screen_components.append(target)&amp;#10;elif current_condition == 'absent_neutral':&amp;#10;    target_present = False&amp;#10;    thisExp.addData(&quot;Target&quot;, &quot;absent&quot;)&amp;#10;    thisExp.addData(&quot;Phase&quot;, &quot;perception&quot;)&amp;#10;    thisExp.addData(&quot;Valence&quot;, &quot;neutral&quot;)&amp;#10;    for i in range(4):&amp;#10;        circle = visual.ShapeStim(&amp;#10;        win=win, name=f'circle_{i}',units='pix', &amp;#10;        size=circle_size, vertices='circle',&amp;#10;        ori=0.0, pos=possible_positions[i], anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='white', fillColor='white',&amp;#10;        opacity=None, depth=-3.0, interpolate=True)&amp;#10;        screen_components.append(circle)&amp;#10;    target = visual.Rect(&amp;#10;        win=win, name='target', units='pix',&amp;#10;        width=image_size[0], height=image_size[1],&amp;#10;        ori=0.0, pos=(0, 0), anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor='red', fillColor='red',&amp;#10;        opacity=None, depth=-8.0, interpolate=True)&amp;#10;    screen_components.append(target)&amp;#10;else:&amp;#10;    print(&quot;something went wrong, option is not available&quot;)&amp;#10;    &amp;#10;for component in screen_components:&amp;#10;    component.setAutoDraw(True)" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="for (var component, _pj_c = 0, _pj_a = screen_components, _pj_b = _pj_a.length; (_pj_c &lt; _pj_b); _pj_c += 1) {&amp;#10;    component = _pj_a[_pj_c];&amp;#10;    component.setAutoDraw(false);&amp;#10;}&amp;#10;psychoJS.experiment.addData(&quot;target_present&quot;, target_present);&amp;#10;if ((target_present === true)) {&amp;#10;    if ((perception_response.keys === &quot;right&quot;)) {&amp;#10;        correct_response = 1;&amp;#10;        psychoJS.experiment.addData(&quot;correct_response&quot;, 1);&amp;#10;    } else {&amp;#10;        if ((perception_response.keys === &quot;left&quot;)) {&amp;#10;            correct_response = 0;&amp;#10;            psychoJS.experiment.addData(&quot;correct_response&quot;, 0);&amp;#10;        } else {&amp;#10;            console.log(&quot;response key is something else than left or right&quot;);&amp;#10;            psychoJS.experiment.addData(&quot;correct_response&quot;, &quot;error&quot;);&amp;#10;        }&amp;#10;    }&amp;#10;} else {&amp;#10;    if ((target_present === false)) {&amp;#10;        if ((perception_response.keys === &quot;right&quot;)) {&amp;#10;            correct_response = 0;&amp;#10;            psychoJS.experiment.addData(&quot;correct_response&quot;, 0);&amp;#10;        } else {&amp;#10;            if ((perception_response.keys === &quot;left&quot;)) {&amp;#10;                correct_response = 1;&amp;#10;                psychoJS.experiment.addData(&quot;correct_response&quot;, 1);&amp;#10;            } else {&amp;#10;                console.log(&quot;response key is something else than left or right&quot;);&amp;#10;                psychoJS.experiment.addData(&quot;correct_response&quot;, &quot;error&quot;);&amp;#10;            }&amp;#10;        }&amp;#10;    } else {&amp;#10;        console.log(&quot;target is not present or absent&quot;);&amp;#10;        psychoJS.experiment.addData(&quot;correct_response&quot;, &quot;target error&quot;);&amp;#10;    }&amp;#10;}&amp;#10;screen_components = [];&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="for component in screen_components:&amp;#10;    component.setAutoDraw(False)&amp;#10;    &amp;#10;thisExp.addData(&quot;target_present&quot;, target_present)&amp;#10;if target_present == True:&amp;#10;    if perception_response.keys == 'right':&amp;#10;        correct_response = 1&amp;#10;        thisExp.addData(&quot;correct_response&quot;, 1)&amp;#10;    elif perception_response.keys == 'left':&amp;#10;        correct_response = 0&amp;#10;        thisExp.addData(&quot;correct_response&quot;, 0)&amp;#10;    else:&amp;#10;        print(&quot;response key is something else than left or right&quot;)&amp;#10;        thisExp.addData(&quot;correct_response&quot;, &quot;error&quot;)&amp;#10;elif target_present == False:&amp;#10;    if perception_response.keys == 'right':&amp;#10;        correct_response = 0&amp;#10;        thisExp.addData(&quot;correct_response&quot;, 0)&amp;#10;    elif perception_response.keys == 'left':&amp;#10;        correct_response = 1&amp;#10;        thisExp.addData(&quot;correct_response&quot;, 1)&amp;#10;    else:&amp;#10;        print(&quot;response key is something else than left or right&quot;)&amp;#10;        thisExp.addData(&quot;correct_response&quot;, &quot;error&quot;)&amp;#10;else:&amp;#10;    print(&quot;target is not present or absent&quot;)&amp;#10;    thisExp.addData(&quot;correct_response&quot;, &quot;target error&quot;)&amp;#10; &amp;#10;screen_components = []" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="perception_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <KeyboardComponent name="perception_response" plugin="None">
        <Param val="'left','right'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$correct_response" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="perception_response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="8.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="experiment_introduction">
      <RoutineSettingsComponent name="experiment_introduction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="experiment_introduction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="experiment_intro_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="experiment_intro_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Welcome to the experiment!&amp;#10;&amp;#10;press 'spacebar' to continue." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="welcome_response" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="welcome_response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="baseline_introduction">
      <RoutineSettingsComponent name="baseline_introduction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="baseline_introduction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="baseline_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="baseline_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="In the experiment, you will be shown three circles and one sqaure. The sqaure is your target. your task is to click on the sqaure as fast as you can.&amp;#10;&amp;#10;press 'spacebar' to continue" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="baseline_intro_response" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="baseline_intro_response" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="action_introduction">
      <RoutineSettingsComponent name="action_introduction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="action_introduction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="action_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="action_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$action_text + &quot;\n&quot; + &quot;press 'spacebar' to continue&quot;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="action_intro_respone" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="action_intro_respone" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="perception_introduction">
      <RoutineSettingsComponent name="perception_introduction" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="perception_introduction" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="perception_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="perception_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$perception_text + &quot;\n&quot; + &quot;press 'spacebar' to continue&quot;" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="perception_intro_respone" plugin="None">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="perception_intro_respone" valType="code" updates="None" name="name"/>
        <Param val="press" valType="str" updates="constant" name="registerOn"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="first key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="thank_you">
      <RoutineSettingsComponent name="thank_you" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="thank_you" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <TextComponent name="thank_you_text" plugin="None">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="thank_you_text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="5.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="thank you for your participation. :))" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="action_fixation_routine">
      <RoutineSettingsComponent name="action_fixation_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="action_fixation_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="action_fixation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="action_fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="fixation_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="perception_fixation_routine">
      <RoutineSettingsComponent name="perception_fixation_routine" plugin="None">
        <Param val="none" valType="str" updates="None" name="backgroundFit"/>
        <Param val="" valType="str" updates="None" name="backgroundImg"/>
        <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
        <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
        <Param val="" valType="str" updates="constant" name="desc"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="perception_fixation_routine" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="constant" name="skipIf"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="useWindowParams"/>
      </RoutineSettingsComponent>
      <PolygonComponent name="perception_fixation" plugin="None">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="white" valType="color" updates="constant" name="fillColor"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="white" valType="color" updates="constant" name="lineColor"/>
        <Param val="1" valType="num" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="perception_fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="None" name="shape"/>
        <Param val="fixation_size" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="pix" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="load_variables"/>
    <Routine name="experiment_introduction"/>
    <Routine name="action_introduction"/>
    <LoopInitiator loopType="TrialHandler" name="action_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('image', 'NegativeHA/2703.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/2811.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3000.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3001.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3005.1.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3010.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3015.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3016.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3030.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3051.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3053.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3059.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3060.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3062.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3063.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3064.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3068.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3069.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3071.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3080.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3100.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3101.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3102.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3103.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3110.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3120.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3130.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3131.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3140.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3150.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3168.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3170.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3180.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3191.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3195.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3225.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3261.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3266.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3350.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3400.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3500.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3530.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3550.1.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6021.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6022.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6212.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6243.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6313.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6315.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6350.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6360.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6415.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6520.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6540.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6560.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6563.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6570.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6821.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9040.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9075.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9163.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9183.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9185.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9187.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9252.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9253.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9254.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9322.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9325.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9326.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9405.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9410.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9412.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9413.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9414.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9420.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9428.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9433.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9570.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9571.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9635.1.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9800.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9810.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9902.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9908.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9910.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9911.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9921.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9940.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'PositiveHA/1650.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2208.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2209.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2216.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2300.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2347.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2389.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4007.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4220.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4225.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4290.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4311.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4490.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4597.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4599.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4607.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4608.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4611.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4626.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4643.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4645.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4650.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4651.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4652.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4653.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4656.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4658.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4659.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4660.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4664.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4666.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4668.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4670.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4672.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4676.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4677.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4680.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4681.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4683.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4687.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4689.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4690.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4693.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4694.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4695.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4697.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4698.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4800.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4810.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5450.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5470.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5621.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5626.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/7515.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8001.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8021.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8030.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8031.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8034.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8040.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8090.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8116.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8158.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8161.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8163.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8178.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8179.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8180.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8186.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8193.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8200.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8206.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8210.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8251.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8300.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8340.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8341.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8370.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8380.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8400.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8420.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8470.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8490.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8492.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8496.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8499.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8501.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8502.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8620.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/9156.jpg'), ('code', 'positive_HA')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="90" valType="num"/>
      <Param name="name" updates="None" val="action_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="action_fixation_routine"/>
    <Routine name="action"/>
    <LoopTerminator name="action_loop"/>
    <Routine name="perception_introduction"/>
    <LoopInitiator loopType="TrialHandler" name="perception_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('image', 'NegativeHA/2703.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/2811.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3000.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3001.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3005.1.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3010.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3015.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3016.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3030.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3051.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3053.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3059.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3060.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3062.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3063.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3064.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3068.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3069.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3071.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3080.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3100.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3101.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3102.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3103.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3110.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3120.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3130.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3131.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3140.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3150.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3168.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3170.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3180.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3191.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3195.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3225.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3261.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3266.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3350.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3400.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3500.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3530.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/3550.1.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6021.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6022.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6212.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6243.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6313.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6315.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6350.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6360.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6415.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6520.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6540.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6560.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6563.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6570.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/6821.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9040.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9075.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9163.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9183.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9185.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9187.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9252.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9253.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9254.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9322.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9325.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9326.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9405.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9410.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9412.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9413.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9414.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9420.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9428.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9433.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9570.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9571.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9635.1.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9800.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9810.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9902.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9908.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9910.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9911.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9921.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'NegativeHA/9940.jpg'), ('code', 'negative_HA')]), OrderedDict([('image', 'PositiveHA/1650.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2208.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2209.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2216.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2300.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2347.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/2389.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4007.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4220.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4225.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4290.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4311.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4490.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4597.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4599.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4607.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4608.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4611.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4626.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4643.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4645.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4650.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4651.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4652.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4653.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4656.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4658.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4659.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4660.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4664.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4666.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4668.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4670.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4672.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4676.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4677.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4680.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4681.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4683.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4687.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4689.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4690.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4693.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4694.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4695.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4697.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4698.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4800.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/4810.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5450.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5470.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5621.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/5626.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/7515.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8001.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8021.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8030.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8031.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8034.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8040.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8090.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8116.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8158.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8161.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8163.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8178.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8179.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8180.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8186.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8193.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8200.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8206.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8210.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8251.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8300.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8340.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8341.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8370.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8380.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8400.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8420.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8470.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8490.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8492.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8496.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8499.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8501.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8502.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/8620.jpg'), ('code', 'positive_HA')]), OrderedDict([('image', 'PositiveHA/9156.jpg'), ('code', 'positive_HA')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="90" valType="num"/>
      <Param name="name" updates="None" val="perception_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="perception_fixation_routine"/>
    <Routine name="perception"/>
    <LoopTerminator name="perception_loop"/>
    <Routine name="thank_you"/>
  </Flow>
</PsychoPy2experiment>
